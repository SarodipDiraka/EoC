"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src_App_tsx",{

/***/ "./src/game/entities/enemies/bosses/first-boss-enemy.ts":
/*!**************************************************************!*\
  !*** ./src/game/entities/enemies/bosses/first-boss-enemy.ts ***!
  \**************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FirstBoss: function() { return /* binding */ FirstBoss; }\n/* harmony export */ });\n/* harmony import */ var _game_components_weapon_bullet_spawner_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/game/components/weapon/bullet-spawner-component */ \"./src/game/components/weapon/bullet-spawner-component.ts\");\n/* harmony import */ var _base_boss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base-boss */ \"./src/game/entities/enemies/bosses/base-boss.ts\");\n\n\nclass FirstBoss extends _base_boss__WEBPACK_IMPORTED_MODULE_1__.BossEnemy {\n    initSprites() {\n        this._shipSprite = this.scene.add.sprite(0, 0, \"fighter\", 0);\n        this._engineSprite = this.scene.add.sprite(0, 0, \"fighter_engine\").setFlipY(true).play(\"fighter_engine\");\n        this.add([\n            this._engineSprite,\n            this._shipSprite\n        ]);\n    }\n    createPhases() {\n        return [\n            {\n                health: 1000,\n                duration: 30000,\n                dropItems: [\n                    {\n                        type: \"HEALTH\",\n                        count: 1,\n                        spread: 30\n                    },\n                    {\n                        type: \"BOMB\",\n                        count: 1,\n                        spread: 30\n                    }\n                ],\n                onEnter: ()=>{\n                    this.fireInterval = 200;\n                    this._movementSpeed = 120;\n                    this._movementChangeCooldown = 2000;\n                },\n                update: (time, delta)=>{\n                    var _this__playerGetter, _this;\n                    if (time - this.lastShootTime < this.fireInterval) return;\n                    if (this.isInvulnerable()) return;\n                    this.lastShootTime = time;\n                    const player = (_this__playerGetter = (_this = this)._playerGetter) === null || _this__playerGetter === void 0 ? void 0 : _this__playerGetter.call(_this); // Получаем игрока\n                    if (!player) return; // Если игрока нет, выходим\n                    // Вычисляем угол между боссом и игроком\n                    const angleToPlayer = Phaser.Math.RadToDeg(Phaser.Math.Angle.Between(this.x, this.y, player.x, player.y));\n                    // Задаем углы разлета пуль относительно направления на игрока\n                    const spreadAngles = [\n                        -30,\n                        -20,\n                        -10,\n                        0,\n                        10,\n                        20,\n                        30\n                    ];\n                    const directions = spreadAngles.map((deg)=>{\n                        // Суммируем угол на игрока и угол разлета\n                        const totalAngle = angleToPlayer + deg;\n                        return new Phaser.Math.Vector2(Math.cos(Phaser.Math.DegToRad(totalAngle)), Math.sin(Phaser.Math.DegToRad(totalAngle)));\n                    });\n                    this.bulletSpawner.spawn({\n                        directions,\n                        speed: 400,\n                        lifespan: 6000,\n                        animationKey: \"bullet\",\n                        size: {\n                            width: 14,\n                            height: 18\n                        },\n                        flipY: false,\n                        scale: 0.8\n                    });\n                }\n            },\n            {\n                health: 1200,\n                duration: 30000,\n                onEnter: ()=>{\n                    this.fireInterval = 300;\n                    this._movementSpeed = 180;\n                    this._movementChangeCooldown = 1500;\n                    this._shotCounter = 0; // Счётчик залпов\n                    this._lineOffset = 0; // Текущее смещение линий\n                },\n                update: (time, delta)=>{\n                    if (time - this.lastShootTime < this.fireInterval) return;\n                    if (this.isInvulnerable()) return;\n                    this.lastShootTime = time;\n                    const bulletCount = 6;\n                    const screenWidth = this.scene.scale.width;\n                    const lineSpacing = screenWidth / bulletCount;\n                    // Смещаем линии каждые n залпов (можно настроить)\n                    if (this._shotCounter % 1 === 0) {\n                        this._lineOffset = (this._lineOffset + lineSpacing * 0.2) % (lineSpacing * 10);\n                    }\n                    this._shotCounter++;\n                    Array(bulletCount).fill(0).forEach((_, i)=>{\n                        // Позиция с учётом смещения\n                        const xPos = ((i + 0.5) * lineSpacing + this._lineOffset) % screenWidth;\n                        const directionY = i % 2 === 0 ? 1 : -1;\n                        const yPos = i % 2 === 0 ? 0 : this.scene.scale.height;\n                        const speed = i % 2 === 0 ? 200 : 300;\n                        this.bulletSpawner.spawn({\n                            directions: [\n                                new Phaser.Math.Vector2(0, directionY)\n                            ],\n                            speed: speed,\n                            lifespan: 4000,\n                            animationKey: \"bullet\",\n                            size: {\n                                width: 14,\n                                height: 18\n                            },\n                            flipY: true,\n                            scale: 0.8,\n                            spawnPosition: {\n                                x: xPos,\n                                y: yPos\n                            }\n                        });\n                    });\n                }\n            },\n            {\n                health: 1200,\n                duration: 30000,\n                onEnter: ()=>{\n                    this._targetPosition = {\n                        x: this.scene.scale.width / 2,\n                        y: 150\n                    };\n                    this._movementState = \"moving\";\n                    this._movementChangeCooldown = Infinity;\n                    // Ожидание достижения центра\n                    this.scene.time.delayedCall(100, ()=>{\n                        if (this.body && Phaser.Math.Distance.BetweenPoints(this._targetPosition, this.body.position) < 10) {\n                            this.body.velocity.set(0, 0);\n                        }\n                    }, [], this);\n                    this.fireInterval = 40;\n                },\n                update: (time, delta)=>{\n                    if (time - this.lastShootTime < this.fireInterval) return;\n                    if (this.body && this.body.velocity.x != 0 && this.body.velocity.y != 0) return;\n                    if (this.isInvulnerable()) return;\n                    this.lastShootTime = time;\n                    const directions = Array(4).fill(0).map(()=>{\n                        let angle;\n                        // chance to shoot downward\n                        if (Phaser.Math.Between(1, 100) <= 25) {\n                            angle = Math.PI * -1.5 + Phaser.Math.FloatBetween(-0.5, 0.5); // -30° to +30°\n                        } else {\n                            angle = Phaser.Math.FloatBetween(0, Math.PI * 2); // Полный рандом\n                        }\n                        return new Phaser.Math.Vector2(Math.cos(angle), Math.sin(angle));\n                    });\n                    this.bulletSpawner.spawn({\n                        directions,\n                        speed: Phaser.Math.Between(300, 550),\n                        lifespan: 2000,\n                        animationKey: \"bullet\",\n                        size: {\n                            width: 14,\n                            height: 18\n                        },\n                        flipY: false,\n                        scale: 0.8\n                    });\n                }\n            },\n            {\n                health: 3500,\n                duration: 60000,\n                onEnter: ()=>{\n                    this._targetPosition = {\n                        x: this.scene.scale.width / 2,\n                        y: this.scene.scale.height / 2 - 50\n                    };\n                    this._movementState = \"moving\";\n                    this._movementChangeCooldown = Infinity;\n                    // Ожидание достижения центра\n                    this.scene.time.delayedCall(100, ()=>{\n                        if (this.body && Phaser.Math.Distance.BetweenPoints(this._targetPosition, this.body.position) < 10) {\n                            this.body.velocity.set(0, 0);\n                        }\n                    }, [], this);\n                    this.fireInterval = 30;\n                    this._patternAngle = 0; // Базовый угол Phaser.Math.Between(0, 360)\n                    this._patternCounter = 0; // Счётчик итераций\n                },\n                update: (time, delta)=>{\n                    // Проверяем интервал стрельбы\n                    if (time - this.lastShootTime < this.fireInterval) return;\n                    if (this.body && this.body.velocity.x != 0 && this.body.velocity.y != 0) return;\n                    if (this.isInvulnerable()) return;\n                    this.lastShootTime = time;\n                    const BULLETS_IN_RING = 5;\n                    const ANGLE_STEP = 20; // Шаг изменения угла\n                    // Создаем кольцо из 5 пуль\n                    const directions = Array(BULLETS_IN_RING).fill(0).map((_, i)=>{\n                        const angleDeg = this._patternAngle + i * (360 / BULLETS_IN_RING);\n                        const angleRad = Phaser.Math.DegToRad(angleDeg);\n                        return new Phaser.Math.Vector2(Math.cos(angleRad), Math.sin(angleRad));\n                    });\n                    this.bulletSpawner.spawn({\n                        directions,\n                        speed: 240,\n                        lifespan: 2000,\n                        animationKey: \"bullet\",\n                        size: {\n                            width: 14,\n                            height: 18\n                        },\n                        flipY: false,\n                        scale: 0.8\n                    });\n                    // Обновляем угол с синусоидальным смещением\n                    this._patternAngle += Math.sin(Phaser.Math.DegToRad(this._patternCounter)) * ANGLE_STEP;\n                    this._patternCounter++;\n                }\n            }\n        ];\n    }\n    init(eventBus, getPlayer) {\n        super.init(eventBus, getPlayer);\n        this.bulletSpawner = new _game_components_weapon_bullet_spawner_component__WEBPACK_IMPORTED_MODULE_0__.BulletSpawnerComponent(this.scene, this, \"bullet\", 320);\n        this.initSprites();\n        this.initPhysics();\n    }\n    initPhysics() {\n        // 1. Добавляем объект в физический мир\n        this.scene.add.existing(this);\n        this.scene.physics.add.existing(this);\n        // 2. Настраиваем хитбокс\n        if (this.body instanceof Phaser.Physics.Arcade.Body) {\n            this.body.setSize(this.hitboxWidth, this.hitboxHeight).setOffset(this.hitboxOffsetX, this.hitboxOffsetY);\n        }\n        // 3. Увеличиваем спрайты\n        this.setScale(2); // Увеличиваем в 2 раза\n    }\n    getInitialHealth() {\n        return 100;\n    }\n    reset() {\n        super.reset();\n        this._engineSprite.setVisible(true);\n        this.bulletSpawner.bulletClear();\n    }\n    destroy(fromScene) {\n        this._engineSprite.destroy(fromScene);\n        super.destroy(fromScene);\n        this.bulletSpawner.bulletClear();\n    }\n    get shipAssetKey() {\n        return \"fighter\";\n    }\n    get shipDestroyedAnimationKey() {\n        return \"fighter_destroy\";\n    }\n    constructor(...args){\n        super(...args);\n        this.lastShootTime = 0;\n        this.fireInterval = 200;\n        // Размеры хитбокса (ширина, высота)\n        this.hitboxWidth = 48;\n        this.hitboxHeight = 48;\n        // Смещение хитбокса (чтобы центрировать)\n        this.hitboxOffsetX = -24;\n        this.hitboxOffsetY = -24;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/game/entities/enemies/bosses/first-boss-enemy.ts\n"));

/***/ })

});